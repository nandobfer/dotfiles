{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "import router defaults": {
        "scope": "javascript",
        "prefix": "apiimports",
        "body": [
            "const express = require('express')",
            "const router = express.Router();",
            "const config = require('../../config.json')",
            "const newMysql = require('../../src/database')",
        ],
        "description": "import defaults for nodejs api"
    },
    "import router defaults typescript": {
        "scope": "typescript",
        "prefix": "apiimports",
        "body": [
            "import express, { Express, Request, Response } from 'express'",
            "import { PrismaClient } from '@prisma/client'",
            "const router = express.Router()",
            "const prisma = new PrismaClient()",
            "",
            "$1",
            "",
            "export default router",
        ],
        "description": "import defaults for nodejs api and types in typescript and es6"
    },
    "new api post": {
        "scope": "javascript",
        "prefix": "apipost",
        "body": [
            "router.post('/$1', async (request, response, next) => {    ",
            "    const data = request.body",
            "",
            "    $2",
            "",
            "})",
        ],
        "description": "Create a new router post route"
    },
    "new api post typescript": {
        "scope": "typescript",
        "prefix": "apipost",
        "body": [
            "router.post('/$1', async (request:Request, response:Response) => {    ",
            "    const data = request.body",
            "",
            "    $2",
            "",
            "})",
        ],
        "description": "Create a new router post route with types"
    },
    "new api post query": {
        "scope": "javascript",
        "prefix": "apipostquery",
        "body": [
            "router.post('/$1', (request, response, next) => {    ",
            "    const data = request.body",
            "",
            "    const mysql = newMysql(config.$2.database)",
            "    mysql.connect()",
            "    ",
            "    mysql.query({",
            "        sql: `$3`,",
            "        timeout: 40000, // 40s",
            "        values: [",
        	"            data.$4,",
            "        ]",
            "    }, (error, results) => {",
            "        if (error) console.error(error)",
            "",
            "        $5",
            "",
            "        mysql.end()",
            "    })",
            "})",
        ],
        "description": "Create a new router post route with mysql query"
    }
}